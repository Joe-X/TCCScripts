!function(root,factory){"function"==typeof define&&define.amd?define([],factory):"object"==typeof module&&module.exports?module.exports=factory():root.typechecker=factory()}(this,function(){"use strict";function getTypeAsString(testValue){return Object.prototype.toString.call(testValue).slice(8,-1)}function isValueOfBasicType(testValue,testType){return getTypeAsString(testValue)===testType}function isArray(testValue){return isValueOfBasicType(testValue,"Array")}function isBoolean(testValue){return isValueOfBasicType(testValue,"Boolean")}function isDate(testValue){return isValueOfBasicType(testValue,"Date")}function isFunction(testValue){return isValueOfBasicType(testValue,"Function")}function isMap(testValue){if(Map)return testValue instanceof Map}function isNumber(testValue){return isValueOfBasicType(testValue,"Number")}function isNull(testValue){return isValueOfBasicType(testValue,"Null")}function isObject(testValue){return isValueOfBasicType(testValue,"Object")}function isRegExp(testValue){return isValueOfBasicType(testValue,"RegExp")}function isString(testValue){return isValueOfBasicType(testValue,"String")}function isUndefined(testValue){return isValueOfBasicType(testValue,"Undefined")}function areBothSameType(testValue1,testValue2){return getTypeAsString(testValue1)===getTypeAsString(testValue2)}return{_getTypeAsString:getTypeAsString,_isValueOfBasicType:isValueOfBasicType,isArray:isArray,isBoolean:isBoolean,isDate:isDate,isFunction:isFunction,isMap:isMap,isNumber:isNumber,isNull:isNull,isObject:isObject,isRegExp:isRegExp,isString:isString,isUndefined:isUndefined,areBothSameType:areBothSameType}});
//# sourceMappingURL=TypeChecker.min.js.map